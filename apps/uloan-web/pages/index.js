import { ethers } from "ethers"
import Web3Modal from "web3modal"
import { useState } from 'react'

import Head from 'next/head'
import Image from 'next/image'
import { Result } from 'postcss'
import Header from '../components/Header'
import Nav from '../components/Nav'
import Results from '../components/Results'
import styles from '../styles/Home.module.css'
import requests from "../utils/requests"

import uloanAbi from '../abis/ULoan.json';
import stablecoinAbi from '../abis/Stablecoin.json';


export default function Home() {
  const [user, setUser] = useState({
      "provider": null,
      "signer": null,
      "signerAddress": null,
  })
  const [contracts, setContracts] = useState({
      "uloanContract": null,
      "stablecoinContract": null
  })

  async function connectContracts() {
    const uloanContract = new ethers.Contract(process.env.REACT_APP_FLOAN_ADDRESS, uloanAbi, user.signer);
    // Get Stablecoin ERC20 address
    const tokenAddress = await uloanContract.stablecoin();
    // const tokenAddress = '';  // Public Testnet
    const stablecoinContract = new ethers.Contract(tokenAddress, stablecoinAbi, user.signer);
    
    setContracts({
      "uloanContract": uloanContract,
      "stablecoinContract": stablecoinContract
    })
  }

  async function connectUser() {
    const web3Modal = new Web3Modal()
    const connection = await web3Modal.connect()
    const provider = new ethers.providers.Web3Provider(connection)
    const signer = provider.getSigner()
    
    setUser({
      "provider": provider,
      "signer": signer,
      "signerAddress": signer.getAddress(),
    })
  }
 

  return (
    <div>
      <Head>
        <title>ULoan</title>
        {/* <meta name="description" content="Generated by create next app" /> */}
        <link rel="icon" href="/favicon.ico" />
      </Head>

    {/* Header */}
      <Header> 
        
      </Header>
    {/* Nav */}
    
      <Nav />
  
    {/* Results */}
     <Results />
    </div>
  )
  // export async function getServerSideProps(context) {
  //   const genre = context.query.genre;
  // }
}
